<!--<script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.2/dist/chart.min.js"></script>-->
<script type="text/javascript" nonce="<%= nonce %>" src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- TO DO: KEINE ABSOLUTEN ANGABEN ZUR SEITENPOSITION MACHEN  60px=10°; 55px=5mm/m²-->





<style>
    #Temperatur {
        position: absolute;
        max-width: 18%;
        width: auto;
        height: auto;
        max-height: 400px;
        margin-left: 20px;
    }

    #Niederschlag {
        position: absolute;
        max-width: 27%;
        width: auto;
        height: auto;
        left: 25%;
        max-height: 400px;
    }

    #Luftfeuchte {
        position: absolute;
        width: 45%;
        height: 100%;
        left: 55%;
        max-width: 250px;
        overflow: hidden;

    }

    #ThermometerFüllung {
        position: absolute;

        background-color: chocolate;
        width: 95%;
        bottom: 0%;
        left: 1%;
        z-index: -1;
    }


    #aktuelleSensordaten {
        width: 100%;
        height: 410px;
        position: relative;
    }

    #Thermometer {
        position: relative;
        bottom: 0;
        height: auto;
        width: auto;
        max-height: 400px;
        max-width: 100%;

    }

    #Regenmesser {
        position: relative;
        height: auto;
        width: auto;
        max-height: 400px;
        max-width: 100%;
    }

    #RegenmesserFüllung {
        position: absolute;
        bottom: 0%;
        background-color: deepskyblue;
        left: 5%;
        width: 90%;

        z-index: -1;
    }

    #Hygrometer {
        position: absolute;


        height: auto;
        width: 100%;
    }

    #HygrometerZeiger {
        position: absolute;
        height: auto;
        width: 100%;

    }

    #Diagramme {
        position: relative;
        border: 2px chocolate;
        width: calc(100% - 40px);
        height: 80%;
    }

   </style>


<div id="aktuelleSensordaten">

    <div id="Temperatur">
        <img src="/images/weather/thermometer.png" id="Thermometer" alt="<%=t('messinstrument.thermometer')%>"/>
        <div id="ThermometerFüllung"></div>
    </div>

    <div id="Niederschlag">
        <img src="/images/weather/regenmesser.png" id="Regenmesser" alt="<%=t('messinstrument.regenmesser')%>"/>
        <div id="RegenmesserFüllung"></div>
    </div>

    <div id="Luftfeuchte">
        <img src="/images/weather/hygrometer.png" id="Hygrometer" alt="<%=t('messinstrument.hygrometer')%>"/>
        <img class="paul" src="/images/weather/hygrometerZeiger.png" id="HygrometerZeiger" alt="<%=t('messinstrument.hygrometerzeiger')%>"/>
    </div>

</div>

<script type="text/javascript" nonce="<%= nonce %>">

    $.ajax({
        url: '/api/temperatur',
        type: 'GET',
        success: function(data) {
            changeHeight(data);
        },
        error: function(xhr, status, error) {
            console.error('Error calling /api/temperatur: ', error);
        }
    });

    function changeHeight(data) {
        const Thermofüllung = document.getElementById('ThermometerFüllung');
        const FyouRegenmesser = document.getElementById('RegenmesserFüllung');
        const Lastbutnotleast = document.getElementById('HygrometerZeiger');
        const tempValues = data.map(row => row.outTemp);
        const rainValues = data.map(row => row.rain);
        const Huminity = (data.map(row => row.outHumidity)*3);

        Thermofüllung.style.height = "calc((20% + " + tempValues + "%) * (14/10) + 7%)";
        FyouRegenmesser.style.height = "calc(" + rainValues + "% * (51/20) + 7%)";
        Lastbutnotleast.style.transform = "rotate(" + Huminity + "deg)";
    }
</script>





<div id="Diagramme" style="position: relative; height:50vh; width:100vw">

    <canvas id="myChart"></canvas>

</div>



<script type="text/javascript" nonce="<%= nonce %>">

    $.ajax({
        url: '/api/chartdata',
        type: 'GET',
        success: function(data) {
            createChart(data);
        },
        error: function(xhr, status, error) {
            console.error('Error calling /api/chartdata: ', error);
        }
    });

    function createChart(data) {
        // Define the values required in the actual chart creation.
        let totalMin;
        let totalMax;

        // Precalculate heavy operations.
        const rainValues = data.map(row => row.rain);
        const tempValues = data.map(row => row.outTemp);
        const maxRain = Math.max(...rainValues);
        const minTemp = Math.min(...tempValues);
        const maxTemp = Math.max(...tempValues);

        const rawTotalMin = Math.min(0, (minTemp * 2)) - 0.1;
        const rawTotalMax = Math.max(maxRain, (maxTemp * 2)) + 0.1;

        // Find appropriate step size.
        let step = 1; // 4
        while (true) {
            totalMin = Math.floor(rawTotalMin / step) * step;
            totalMax = Math.ceil(rawTotalMax / step) * step;
            const d = totalMax - totalMin;

            if (d / step <= 10) {
                break;
            } else {
                step = step * 2;
            }
        }


        const canvas = document.getElementById('myChart');
        new Chart(canvas, {
            type: 'line',
            data: {
                labels: data.map(row => new Date(row.date).toLocaleDateString("<%= lang %>")),
                datasets: [{
                    label: 'Temperatur',
                    yAxisID: 'left-y-axis',
                    data: tempValues,
                    fill: true,
                    tension: 0.4,
                    backgroundColor: 'rgba(255,255,0,0.25)',
                    borderColor: 'rgba(255,0,0,1)'
                }, {
                    label: 'Niederschlag',
                    yAxisID: 'right-y-axis',
                    data: rainValues,
                    fill: {
                        target: 'origin',
                        below: 'rgba(0,0,0,0)',
                        above: 'rgba(0,0,255,0.25)'
                    },
                    tension: 0.1,
                    backgroundColor: 'rgba(0,0,255,0.25)',
                    borderColor: 'rgb(0,0,255)'
                }]
            },
            options: {
                maintainAspectRatio: false,
                cubicInterpolationMode: 'monotone',
                scales: {
                    'left-y-axis': {
                        type: 'linear',
                        position: 'left',
                        ticks: {
                            callback: function(value, index, values) {
                                if (value > 40) {
                                    return null;
                                } else {
                                    return value;
                                }
                            },
                            stepSize: step / 2
                        },
                        max: totalMax / 2,
                        min: totalMin / 2
                    },
                    'right-y-axis': {
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            callback: function (value, index, values) {
                                if (value < 0) {
                                    return null;
                                } else {
                                    return value;
                                }
                            },
                            stepSize: step
                        },
                        max: totalMax,
                        min: totalMin
                    }
                }
            }
        });
    }
</script>

